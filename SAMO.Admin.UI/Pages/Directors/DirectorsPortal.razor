@inject IAdminService AdminService

@if (!string.IsNullOrEmpty(Alert))
{
	<div class="d-flex">
		<div class="alert alert-danger alert-dismissible fade show" role="alert">
			<strong>@Alert</strong>
			<button type="button" @onclick="CloseAlert" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>
}

@if (Navigation == PageType.Create)
{
	<ChangeDirector Page="@Navigation" OnChanged="OnChanged"></ChangeDirector>
}
@if (Navigation == PageType.Delete || Navigation == PageType.Edit)
{
	<ChangeDirector Page="@Navigation" OnChanged="OnChanged" Model="Director"> </ChangeDirector>
}

<div class="d-flex me-1">
	<a href="/" class="btn btn-outline-secondary rounded-0 me-1">Home</a>
	<button type="button" class="btn btn-outline-primary rounded-0 me-1" @onclick="()=>ChangePageType(PageType.Index)">Index</button>
	<button type="button" class="btn btn-outline-success rounded-0" @onclick="()=>ChangePageType(PageType.Create)">Create</button>
</div>

<DirectorsIndex OnClick="OnClick" Model="Model"></DirectorsIndex>


@code {

	public string Alert = "";
	string Navigation { get; set; } = PageType.Index;
	public List<DirectorDTO> Model { get; set; } = new();
	public DirectorDTO Director { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		Model = await AdminService.GetAsync<DirectorDTO>("director");

	}

	async Task OnClick(ClickModel model)
	{
		if (model.PageType.Equals(PageType.Edit) || model.PageType.Equals(PageType.Delete))
			Director = await AdminService.SingleAsync<DirectorDTO>($"director/{model.Id}") ?? new();

		ChangePageType(model.PageType);
	}


	void ChangePageType(string pageType) => Navigation = pageType;

	void CloseAlert() => Alert = "";

	async Task OnChanged(string message)
	{
		Alert = message;
		Model = await AdminService.GetAsync<DirectorDTO>("director");
		ChangePageType(PageType.Index);
	}

}
